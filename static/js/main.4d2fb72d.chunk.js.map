{"version":3,"sources":["types/ErrorType.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/ErrorMessage.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ErrorType","PostsList","posts","onPostSelect","selectedPost","isPostSelected","post","id","className","map","title","type","classNames","onClick","handlePostSelect","Loader","ErrorMessage","errorType","POSTS","COMMENTS","COMMENT_POST","COMMENT_DELETE","data","NewCommentForm","onCommentAdd","isSubmitting","onloading","useState","name","setName","email","setEmail","body","setBody","isNameValid","setIsNameValid","isEmailValid","setIsEmailValid","isBodyValid","setIsBodyValid","handleSubmit","e","preventDefault","onSubmit","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","JSON","stringify","headers","then","fetch","response","json","client","postComment","comment","deleteComment","commentId","CommentInfo","postId","this","PostDetails","onError","comments","setComments","isLoading","setIsLoading","isFormVisible","setIsFormVisible","isFormSubmitting","setIsFormSubmitting","hasNoComments","length","hasComments","isWriteCommentButtonVisible","loadComments","a","commentsFromServer","commentsInfo","handleAddComment","handleDeleteComment","filter","useEffect","href","UserSelector","selectedUser","users","onUserSelected","isError","isMenuOpen","setIsMenuOpen","disabled","role","user","handleUserSelect","UserInfo","phone","PostInfo","userId","App","setUsers","setSelectedUser","userPosts","setUserPosts","setSelectedPost","setErrorType","hasNoPosts","hasPosts","loadUsers","usersFromServer","usersInfo","USERS","loadPosts","postsFromServer","postsInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d2fb72d.chunk.js","sourcesContent":["export enum ErrorType {\n  USERS = 'Oops! Something went wrong. Try again later.',\n  POSTS = 'Oops! Something went wrong. Can\\'t load posts.',\n  COMMENTS = 'Oops! Something went wrong. Can\\'t load comments.',\n  COMMENT_POST = 'Oops! Something went wrong. Can\\'t post comment.',\n  COMMENT_DELETE = 'Oops! Something went wrong. Can\\'t delete comment.',\n}\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onPostSelect: (post: Post | null) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPostSelect,\n  selectedPost,\n}) => {\n  const isPostSelected = (post: Post) => selectedPost?.id === post.id;\n\n  const handlePostSelect = (post: Post) => {\n    if (isPostSelected(post)) {\n      onPostSelect(null);\n    } else {\n      onPostSelect(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table\n        className=\"\n          table\n          is-fullwidth\n          is-striped\n          is-hoverable\n          is-narrow\n        \"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th />\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': !isPostSelected(post) },\n                  )}\n                  onClick={() => handlePostSelect(post)}\n                >\n                  {isPostSelected(post) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ errorType }) => {\n  const data = () => {\n    switch (errorType) {\n      case ErrorType.POSTS:\n        return 'PostsLoadingError';\n\n      case ErrorType.COMMENTS:\n        return 'CommentsError';\n\n      case ErrorType.COMMENT_POST:\n        return 'CommentPostError';\n\n      case ErrorType.COMMENT_DELETE:\n        return 'CommentDeleteError';\n\n      default:\n        return 'UsersLoadingError';\n    }\n  };\n\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy={data()}\n    >\n      {errorType}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\nimport { ErrorMessage } from './ErrorMessage';\n\ntype Props = {\n  onCommentAdd: (comment: CommentData) => Promise<void>;\n  isSubmitting: boolean;\n  onloading: (value: boolean) => void;\n  errorType: ErrorType | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onCommentAdd,\n  isSubmitting,\n  onloading,\n  errorType,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isNameValid, setIsNameValid] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isBodyValid, setIsBodyValid] = useState(true);\n\n  const handleFormReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsNameValid(true);\n    setIsEmailValid(true);\n    setIsBodyValid(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!name) {\n      setIsNameValid(false);\n    }\n\n    if (!email) {\n      setIsEmailValid(false);\n    }\n\n    if (!body) {\n      setIsBodyValid(false);\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    onloading(true);\n    await onCommentAdd({ name, email, body });\n    setBody('');\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setIsNameValid(true);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setIsEmailValid(true);\n  };\n\n  const handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(e.target.value);\n    setIsBodyValid(true);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !isNameValid },\n            )}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isNameValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isNameValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !isEmailValid },\n            )}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmailValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmailValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': !isBodyValid },\n            )}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {!isBodyValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Comment is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isSubmitting },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {errorType === ErrorType.COMMENT_POST\n        && <ErrorMessage errorType={errorType} />}\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { deleteComment, getPostComments, postComment } from '../api/api';\nimport { ErrorType } from '../types/ErrorType';\nimport { ErrorMessage } from './ErrorMessage';\n\nclass CommentInfo implements Comment {\n  id: number;\n\n  postId: number;\n\n  name: string;\n\n  email: string;\n\n  body: string;\n\n  constructor({\n    id, postId, name, email, body,\n  }: Comment) {\n    this.id = id || 0;\n    this.postId = postId;\n    this.name = name;\n    this.email = email;\n    this.body = body;\n  }\n}\n\ntype Props = {\n  post: Post;\n  onError: (error: ErrorType | null) => void;\n  errorType: ErrorType | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post, onError, errorType }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [isFormSubmitting, setIsFormSubmitting] = useState(false);\n\n  const hasNoComments = (\n    !comments.length\n    && !isLoading\n    && errorType !== ErrorType.COMMENTS\n  );\n  const hasComments = (\n    !!comments.length\n    && !isLoading\n    && errorType !== ErrorType.COMMENTS\n  );\n\n  const isWriteCommentButtonVisible = (\n    !isFormVisible\n    && !isLoading\n    && errorType !== ErrorType.COMMENTS\n  );\n\n  const loadComments = async () => {\n    try {\n      const commentsFromServer = await getPostComments(post.id);\n      const commentsInfo = commentsFromServer.map(\n        comment => new CommentInfo(comment),\n      );\n\n      setComments(commentsInfo);\n    } catch {\n      onError(ErrorType.COMMENTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddComment = async (comment: CommentData) => {\n    try {\n      await postComment({\n        ...comment,\n        postId: post.id,\n      });\n      await loadComments();\n    } catch {\n      onError(ErrorType.COMMENT_POST);\n    } finally {\n      setIsFormSubmitting(false);\n    }\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments(comments.filter(({ id }) => id !== commentId));\n      await deleteComment(commentId);\n    } catch {\n      onError(ErrorType.COMMENT_DELETE);\n      loadComments();\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsFormVisible(false);\n    onError(null);\n    loadComments();\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {(\n            errorType === ErrorType.COMMENTS\n            || errorType === ErrorType.COMMENT_DELETE\n          )\n            && <ErrorMessage errorType={errorType} />}\n\n          {hasNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {hasComments && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id || 0)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div\n                    className=\"message-body\"\n                    data-cy=\"CommentBody\"\n                  >\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isWriteCommentButtonVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm\n            onCommentAdd={handleAddComment}\n            isSubmitting={isFormSubmitting}\n            onloading={setIsFormSubmitting}\n            errorType={errorType}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser: User | null;\n  users: User[];\n  onUserSelected: (user: User) => void;\n  isError: boolean;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  users,\n  onUserSelected,\n  isError,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const handleUserSelect = (user: User) => {\n    onUserSelected(user);\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isMenuOpen },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          disabled={isError}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isMenuOpen && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser?.id === user.id },\n                )}\n                onClick={() => handleUserSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-classes-per-file */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUserPosts, getUsers } from './api/api';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { ErrorType } from './types/ErrorType';\nimport { ErrorMessage } from './components/ErrorMessage';\n\nclass UserInfo implements User {\n  id: number;\n\n  name: string;\n\n  email: string;\n\n  phone: string;\n\n  constructor({\n    id, name, email, phone,\n  }: User) {\n    this.id = id;\n    this.name = name;\n    this.email = email;\n    this.phone = phone;\n  }\n}\n\nclass PostInfo implements Post {\n  id: number;\n\n  title: string;\n\n  body: string;\n\n  userId: number;\n\n  constructor({\n    id, title, body, userId,\n  }: Post) {\n    this.id = id;\n    this.title = title;\n    this.body = body;\n    this.userId = userId;\n  }\n}\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [errorType, setErrorType] = useState<ErrorType | null>(null);\n\n  const hasNoPosts = (\n    selectedUser\n    && !userPosts.length\n    && !isLoading\n    && errorType !== ErrorType.POSTS\n  );\n  const hasPosts = (\n    selectedUser\n    && !!userPosts.length\n    && !isLoading\n    && errorType !== ErrorType.POSTS\n  );\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n      const usersInfo = usersFromServer.map((user) => new UserInfo(user));\n\n      setUsers(usersInfo);\n    } catch {\n      setErrorType(ErrorType.USERS);\n    }\n  };\n\n  const loadPosts = async () => {\n    if (!selectedUser) {\n      return;\n    }\n\n    try {\n      const postsFromServer = await getUserPosts(selectedUser.id);\n      const postsInfo = postsFromServer.map((post) => new PostInfo(post));\n\n      setUserPosts(postsInfo);\n    } catch {\n      setErrorType(ErrorType.POSTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsLoading(true);\n    setSelectedPost(null);\n  };\n\n  useEffect(() => {\n    setErrorType(null);\n    loadPosts();\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  users={users}\n                  onUserSelected={handleUserSelect}\n                  isError={errorType === ErrorType.USERS}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !errorType && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {(\n                  errorType === ErrorType.POSTS || errorType === ErrorType.USERS\n                )\n                  && (\n                    <ErrorMessage\n                      errorType={errorType}\n                    />\n                  )}\n\n                {hasNoPosts && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {hasPosts && (\n                  <PostsList\n                    posts={userPosts}\n                    onPostSelect={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  onError={setErrorType}\n                  errorType={errorType}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}